# This is my attempt to monitor communications via RS-485 diagnostic port on the HVAC control board.
# Using ESP32 and RS-485 module in ESPHome
# HVAC is an Amana Furnace and Air Conditioner
# Much of the information gather on the procotol and decoding were gain from the below repos:
# - ClimateTalk Specs: https://github.com/rrmayer/climate-talk-web-api
# - ClimateTalk Python: https://github.com/kdschlosser/ClimateTalk
# - Net845: https://github.com/kpishere/Net485

# Inspired by the Econet project: https://github.com/esphome-econet/

# Diagnostic port on control board pinout.  A and B are for data communication, and G is ground. 12V is left empty
#    6P4C RJ11/RJ12 male connector end view   
#    
#              +---------+
#            1 ---       |
#   (unused) 2 ---       +--+ 
#        B   3 ---          |     
#        A   4 ---          |        
#       GND  5 ---       +--+
#            6 ---       |
#              +---------+

substitutions:
  name: climatetalk-hvac
  friendly_name: HVAC
  comment: "HVAC"
  logger_level: DEBUG

esphome:
  name: econet-hvac_furnace
  friendly_name: HVAC

esp32:
  board: esp32dev
  framework:
    type: arduino

api:
  encryption:
    key: !secret hvac_api_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "HVAC Fallback Hotspot"
    password: !secret wifi_password

ota:
  - platform: esphome
    password: !secret hvac_ota_key

# Enable logging
logger:
  level: ${logger_level}
  baud_rate: 0 #disable logging over uart

captive_portal:

#################################################
# 1) DEFINE GLOBALS TO HOLD DEMAND & FAN DETAILS
#################################################
globals:

  - id: humidification_demand_glob
    type: float
    restore_value: false
    initial_value: "0.0"

  - id: fan_demand_glob
    type: float
    restore_value: false
    initial_value: "0.0"

  - id: fan_mode_glob
    type: int
    restore_value: false
    initial_value: "0"

  - id: fan_rate_glob
    type: int
    restore_value: false
    initial_value: "0"

  - id: heat_demand_glob
    type: float
    restore_value: false
    initial_value: "0.0"


##################################
# 2) CREATE SENSORS FOR HA ENTITIES
##################################
sensor:
  - platform: template
    id: humidification_demand_sensor
    name: "Humidification Demand"
    unit_of_measurement: "%"
    accuracy_decimals: 1
    icon: "mdi:water-percent"
    lambda: |-
      // read from the global float
      return id(humidification_demand_glob);

  - platform: template
    name: "Fan Demand"
    id: fan_demand_sensor
    unit_of_measurement: "%"
    device_class: power_factor   # Or remove if uncertain
    accuracy_decimals: 1
    lambda: |-
      return id(fan_demand_glob);

  - platform: template
    name: "Fan Mode"
    id: fan_mode_sensor
    icon: "mdi:fan"
    lambda: |-
      return id(fan_mode_glob);

  - platform: template
    name: "Fan On/Off Rate"
    id: fan_rate_sensor
    icon: "mdi:autorenew"
    lambda: |-
      return id(fan_rate_glob);

  - platform: template
    name: "Heat Demand"
    id: heat_demand_sensor
    unit_of_measurement: "%"
    accuracy_decimals: 1
    lambda: |-
      return id(heat_demand_glob);

#################################
#### UART SETUP/DECODE BYTES ####
#################################
uart:
  id: uart_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
      delimiter: "\n"
    sequence:
      - lambda: |-
          // Lookup tables

          // Message Types
          static const std::map<uint8_t, const char*> messageTypeMap = {
            {0x01, "GET_CONFIGURATION"},
            {0x81, "GET_CONFIGURATION_RESPONSE"},
            {0x02, "GET_STATUS"},
            {0x82, "GET_STATUS_RESPONSE"},
            {0x03, "SET_CONTROL_COMMAND"},
            {0x83, "SET_CONTROL_COMMAND_RESPONSE"},
            {0x04, "SET_DISPLAY_MESSAGE"},
            {0x84, "SET_DISPLAY_MESSAGE_RESPONSE"},
            {0x05, "SET_DISGNOSTICS"},
            {0x85, "SET_DISGNOSTICS_RESPONSE"},
            {0x06, "GET_DIAGNOSTICS"},
            {0x86, "GET_DIAGNOSTICS_RESPONSE"},
            {0x07, "GET_SENSOR_DATA"},
            {0x87, "GET_SENSOR_DATA_RESPONSE"},
            {0x0D, "SET_IDENTIFICATION"},
            {0x8D, "SET_IDENTIFICATION_RESPONSE"},
            {0x0E, "GET_IDENTIFICATION"},
            {0x8E, "GET_IDENTIFICATION_RESPONSE"},
            {0x10, "SET_APPLICATION_SHARED_DATA_TO_NETWORK"},
            {0x90, "SET_APPLICATION_SHARED_DATA_TO_NETWORK_RESPONSE"},
            {0x11, "GET_APPLICATION_SHARED_DATA_TO_NETWORK"},
            {0x91, "GET_APPLICATION_SHARED_DATA_TO_NETWORK_RESPONSE"},
            {0x12, "SET_MANUFACTURER_DEVICE_DATA"},
            {0x92, "SET_MANUFACTURER_DEVICE_DATA_RESPONSE"},
            {0x13, "GET_MANUFACTURER_DEVICE_DATA"},
            {0x93, "GET_MANUFACTURER_DEVICE_DATA_RESPONSE"},
            {0x14, "SET_NETWORK_NODE_LIST"},
            {0x94, "SET_NETWORK_NODE_LIST_RESPONSE"},
            {0x1D, "DIRECT_MEMORY_ACCESS_READ"},
            {0x9D, "DIRECT_MEMORY_ACCESS_READ_RESPONSE"},
            {0x1E, "DIRECT_MEMORY_ACCESS_READ_RESPONSE_MOTOR"},
            {0x1F, "SET_MANUFACTURER_GENERIC_DATA"},
            {0x9F, "SET_MANUFACTURER_GENERIC_DATA_RESPONSE"},
            {0x20, "GET_MANUFACTURER_GENERIC_DATA"},
            {0xA0, "GET_MANUFACTURER_GENERIC_DATA_RESPONSE"},
            {0x21, "GET_MANUFACTURER_GENERIC_DATA_RESPONSE_MOTOR"},
            {0x41, "GET_USER_MENU"},
            {0xC1, "GET_USER_MENU_RESPONSE"},
            {0x42, "SET_USER_MENU"},
            {0xC2, "SET_USER_MENU_RESPONSE"},
            {0x43, "SET_FACTORY_SHARED_DATA_TO_APPLICATION"},
            {0xC3, "SET_FACTORY_SHARED_DATA_TO_APPLICATION_RESPONSE"},
            {0x44, "GET_SHARED_DATA_FROM_APPLICATION"},
            {0xC4, "GET_SHARED_DATA_FROM_APPLICATION_RESPONSE"},
            {0x5A, "SET_ECHO_DATA"},
            {0xDA, "SET_ECHO_DATA_RESPONSE"},
            // CT-485-specific
            {0x00, "REQUEST_TO_RECEIVE/RESPONSE"},
            {0x75, "NETWORK_STATE_REQUEST"},
            {0xF5, "NETWORK_STATE_REQUEST_RESPONSE"},
            {0x76, "ADDRESS_CONFIRMATION"},
            {0xF6, "ADDRESS_CONFIRMATION_RESPONSE"},
            {0x77, "TOKEN_OFFER"},
            {0xF7, "TOKEN_OFFER_RESPONSE"},
            {0x78, "VERSION_ANNOUNCEMENT"},
            {0x79, "NODE_DISCOVERY"},
            {0xF9, "NODE_DISCOVERY_RESPONSE"},
            {0x7A, "SET_ADDRESS"},
            {0xFA, "SET_ADDRESS_RESPONSE"},
            {0x7B, "GET_NODE_ID"},
            {0xFB, "GET_NODE_ID_RESPONSE"},
            {0x7D, "NETWORK_SHARED_DATA_SECTOR_IMAGE_READ_WRITE_REQUEST"},
            {0xFD, "NETWORK_SHARED_DATA_SECTOR_IMAGE_READ_WRITE_REQUEST_RESPONSE"},
            {0x7E, "NETWORK_ENCAPSULATION_REQUEST"},
            {0xFE, "NETWORK_ENCAPSULATION_REQUEST_RESPONSE"}
          };

          // Subnet Addresses
          static const std::map<uint8_t, const char*> subnetAddressMap = {
            {0x00, "Broadcast"},
            {0x01, "Maintenance"},
            {0x02, "Version 1"},
            {0x03, "Version 2"},
          };

          // Send Methods
          static const std::map<uint8_t, const char*> sendMethodMap = {
            {0x00, "NoRoute"},
            {0x01, "Priority"},
            {0x02, "TargetedNode"},
            {0x03, "TargetedNodeId"}
          };

          // Node Types
          static const std::map<uint8_t, const char*> nodeTypeMap = {
            {0x00, "Any"},
            {0x01, "Thermostat"},
            {0x02, "Gas Furnace"},
            {0x03, "Air Handler"},
            {0x04, "Air Conditioner"},
            {0x05, "Heat Pump"},
            {0x06, "Electric Furnace"},
            {0x07, "Package System - Gas"},
            {0x08, "Package System - Electric"},
            {0x09, "Crossover (aka OBBI)"},
            {0x0A, "Secondary Compressor"},
            {0x0B, "Air Exchanger"},
            {0x0C, "Unitary Control"},
            {0x0D, "Dehumidifier"},
            {0x0E, "Electronic Air Cleaner"},
            {0x0F, "ERV"},
            {0x10, "Humidifier (Evaporative)"},
            {0x11, "Humidifier (Steam)"},
            {0x12, "HRV"},
            {0x13, "IAQ Analyzer"},
            {0x14, "Media Air Cleaner"},
            {0x15, "Zone Control"},
            {0x16, "Zone User Interface"},
            {0x17, "Boiler"},
            {0x18, "Water Heater – Gas"},
            {0x19, "Water Heater – Electric"},
            {0x1A, "Water Heater - Commercial"},
            {0x1B, "Pool Heater"},
            {0x1C, "Ceiling Fan"},
            {0x1D, "Gateway"},
            {0x1E, "Diagnostic Device"},
            {0x1F, "Lighting Control"},
            {0x20, "Security System"},
            {0x21, "UV Light"},
            {0x22, "Weather Data Device"},
            {0x23, "Whole House Fan"},
            {0x24, "Solar Inverter"},
            {0x25, "Zone Damper"},
            {0x26, "Zone Temperature Control (ZTC)"},
            {0x27, "Temperature Sensor"},
            {0x28, "Occupancy Sensor"},
            {0xA5, "Network Coordinator"},
          };

          // Command Map
          static const std::map<uint8_t, const char*> commandMap = {
            {0x01, "HEAT_SET_POINT_TEMPERATURE_MODIFY"},
            {0x02, "COOL_SET_POINT_TEMPERATURE_MODIFY"},
            {0x03, "HEAT_PROFILE_CHANGE"},
            {0x04, "COOL_PROFILE_CHANGE"},
            {0x05, "SYSTEM_SWITCH_MODIFY"},
            {0x06, "PERMANENT_SET_POINT_TEMP_HOLD_MODIFY"},
            {0x07, "FAN_KEY_SELECTION"},
            {0x08, "HOLD_OVERRIDE"},
            {0x09, "BEEPER_ENABLE"},
            {0x0C, "FAHRENHEIT_CELSIUS_DISPLAY"},
            {0x0E, "COMFORT_RECOVERY_MODIFY"},
            {0x0F, "REAL_TIME_DAY_OVERRIDE"},
            {0x14, "CHANGE_FILTER_TIME_REMAINING"},
            {0x15, "VACATION_MODE"},
            {0x16, "HIGH_ALARM_LIMIT_CHANGE"},
            {0x17, "LOW_ALARM_LIMIT_CHANGE"},
            {0x18, "HIGH_OUTDOOR_ALARM_LIMIT_CHANGE"},
            {0x19, "LOW_OUTDOOR_ALARM_LIMIT_CHANGE"},
            {0x1A, "TEMP_DISPLAY_ADJ_FACTOR_CHANGE"},
            {0x2D, "CLEAR_COMPRESSOR_RUN_TIME"},
            {0x31, "RESET_MICRO"},
            {0x33, "COMPRESSOR_LOCKOUT"},
            {0x3D, "HOLD_RELEASE"},
            {0x3E, "PROGRAM_INTERVAL_TYPE_MODIFICATION"},
            {0x3F, "COMMUNICATIONS_RECEIVER_ON_OFF"},
            {0x40, "FORCE_PHONE_NUMBER_DISPLAY"},
            {0x45, "RESTORE_FACTORY_DEFAULTS"},
            {0x46, "CUSTOM_MESSAGE_AREA_DISPLAY_DATA"},
            {0x47, "SET_POINT_TEMP_AND_TEMPORARY_HOLD"},
            {0x48, "CONTINUOUS_DISPLAY_LIGHT"},
            {0x4E, "ADVANCE_REAL_TIME_DAY_OVERRIDE"},
            {0x4F, "KEYPAD_LOCKOUT"},
            {0x50, "TEST_MODE"},
            {0x51, "SUBSYSTEM_INSTALLATION_TEST"},
            {0x52, "AUTO_PAIRING_REQUEST_1"},
            {0x53, "PAIRING_OWNERSHIP_REQUEST_1 / SET_POINT_TEMP_TIME_HOLD"},
            {0x55, "COMFORT_MODE_MODIFICATION"},
            {0x56, "LIMITED_HEAT_AND_COOL_RANGE"},
            {0x57, "AUTO_PAIRING_REQUEST_2"},
            {0x58, "PAIRING_OWNERSHIP_REQUEST_2"},
            {0x59, "REVERSING_VALVE_CONFIG"},
            {0x5A, "HUM_DEHUM_CONFIG"},
            {0x5B, "CHANGE_UV_LIGHT_MAINTENANCE_TIMER"},
            {0x5C, "CHANGE_HUMIDIFIER_PAD_MAINT_TIMERALL"},
            {0x5D, "DEHUMIDIFICATION_SET_POINT_MODIFY"},
            {0x5E, "HUMIDIFICATION_SET_POINT_MODIFY"},
            {0x60, "DAMPER_POSITION_DEMAND"},
            {0x61, "SUBSYSTEM_BUSY_STATUS"},
            {0x62, "DEHUMIDIFICATION_DEMAND"},
            {0x63, "HUMIDIFICATION_DEMAND"},
            {0x64, "HEAT_DEMAND"},
            {0x65, "COOL_DEMAND"},
            {0x66, "FAN_DEMAND"},
            {0x67, "BACK_UP_HEAT_DEMAND"},
            {0x68, "DEFROST_DEMAND"},
            {0x69, "AUX_HEAT_DEMAND"},
            {0x6A, "SET_MOTOR_SPEED"},
            {0x6B, "SET_MOTOR_TORQUE"},
            {0x6C, "SET_AIRFLOW_DEMAND"},
            {0x6D, "SET_CONTROL_MODE"},
            {0x6E, "SET_DEMAND_RAMP_RATE"},
            {0x6F, "SET_MOTOR_DIRECTION"},
            {0x70, "SET_MOTOR_TORQUE_PERCENT"},
            {0x71, "SET_MOTOR_POSITION_DEMAND"},
            {0x72, "SET_BLOWER_COEFFICIENT_1"},
            {0x73, "SET_BLOWER_COEFFICIENT_2"},
            {0x74, "SET_BLOWER_COEFFICIENT_3"},
            {0x75, "SET_BLOWER_COEFFICIENT_4"},
            {0x76, "SET_BLOWER_COEFFICIENT_5"},
            {0x77, "SET_BLOWER_IDENTIFICATION_0"},
            {0x78, "SET_BLOWER_IDENTIFICATION_1"},
            {0x79, "SET_BLOWER_IDENTIFICATION_2"},
            {0x7A, "SET_BLOWER_IDENTIFICATION_3"},
            {0x7B, "SET_BLOWER_IDENTIFICATION_4"},
            {0x7C, "SET_BLOWER_IDENTIFICATION_5"},
            {0x7F, "SET_SPEED_LIMIT"},
            {0x80, "SET_TORQUE_LIMIT"},
            {0x81, "SET_AIRFLOW_LIMIT"},
            {0x82, "SET_POWER_OUTPUT_LIMIT"},
            {0x83, "SET_DEVICE_TEMPERATURE_LIMIT"},
            {0x85, "STOP_MOTOR_BY_BRAKING"},
            {0x86, "RUN_STOP_MOTOR"},
            {0x88, "SET_DEMAND_RAMP_TIME"},
            {0x89, "SET_INDUCER_RAMP_RATE"},
            {0x8A, "SET_BLOWER_COEFFICIENT_6"},
            {0x8B, "SET_BLOWER_COEFFICIENT_7"},
            {0x8C, "SET_BLOWER_COEFFICIENT_8"},
            {0x8D, "SET_BLOWER_COEFFICIENT_9"},
            {0x8E, "SET_BLOWER_COEFFICIENT_10"},
            {0xE0, "PUBLISH_PRICE"},
            {0xF0, "WATER_HEATER_MODIFY"}
          };

          // Print column headers
          ESP_LOGD("uart", "Dest | Src | Subnet | Meth | Params | SrcNode | MsgType | PktNum | Len | Payload HEX             | Checksum");

          // Validate minimum length
          if (bytes.size() < 10) {
            ESP_LOGW("uart", "Message too short to process.");
            return;
          }

          // Extract fields
          uint8_t destination_address = bytes[0];
          uint8_t source_address = bytes[1];
          uint8_t subnet = bytes[2];
          uint8_t send_method = bytes[3];
          uint16_t send_params = (bytes[4] << 8) | bytes[5];
          uint8_t source_node_type = bytes[6];
          uint8_t message_type = bytes[7];
          uint8_t packet_number = bytes[8];
          uint8_t packet_length = bytes[9];

          // Check length
          if (bytes.size() < (10 + packet_length + 2)) {
            ESP_LOGW("uart", "Message length mismatch. Expected at least %u bytes.", 10 + packet_length + 2);
            return;
          }

          // Extract payload
          std::string payload_hex;
          std::string payload_ascii;
          for (size_t i = 10; i < 10 + packet_length; i++) {
            char c = bytes[i];
            char hex_buf[4];
            sprintf(hex_buf, "%02X ", bytes[i]);
            payload_hex += hex_buf;
            payload_ascii += (isprint((unsigned char)c)) ? c : '.';
          }

          // Extract checksum
          uint16_t checksum = (bytes[10 + packet_length] << 8) | bytes[10 + packet_length + 1];

          // Log table line
          ESP_LOGD("uart", "0x%02X | 0x%02X | 0x%02X  | 0x%02X | 0x%04X | 0x%02X     | 0x%02X    | 0x%02X    | %u        | %s         | 0x%04X",
                   destination_address, source_address, subnet, send_method, send_params, source_node_type,
                   message_type, packet_number, packet_length, payload_hex.c_str(), checksum);

          // Look up human-readable fields
          const char* message_name = "UNKNOWN_MESSAGE_TYPE";
          const char* subnet_name = "UNKNOWN_SUBNET";
          const char* send_method_name = "UNKNOWN_SEND_METHOD";
          const char* node_type_name = "UNKNOWN_NODE_TYPE";

          {
            auto it = messageTypeMap.find(message_type);
            if (it != messageTypeMap.end()) message_name = it->second;
          }
          {
            auto it = subnetAddressMap.find(subnet);
            if (it != subnetAddressMap.end()) subnet_name = it->second;
          }
          {
            auto it = sendMethodMap.find(send_method);
            if (it != sendMethodMap.end()) send_method_name = it->second;
          }
          {
            auto it = nodeTypeMap.find(source_node_type);
            if (it != nodeTypeMap.end()) node_type_name = it->second;
          }

          ESP_LOGD("uart", "MessageType: %s | Subnet: %s | SendMethod: %s | NodeType: %s | Payload(ASCII): %s",
                   message_name, subnet_name, send_method_name, node_type_name, payload_ascii.c_str());

          // Only decode commands if message_type is SET_CONTROL_COMMAND(0x03) or SET_CONTROL_COMMAND_RESPONSE(0x83)
          if ((message_type == 0x03) || (message_type == 0x83)) {
            // Decode Commands if present
            size_t cmd_index = 10; 
            if (packet_length > 1 && (10 + 1 < 10 + packet_length)) {
              uint8_t cmd_code = bytes[cmd_index];
              uint8_t cmd_subcode = bytes[cmd_index + 1];

              const char* cmd_name = "UNKNOWN_COMMAND";
              {
                auto cmd_it = commandMap.find(cmd_code);
                if (cmd_it != commandMap.end()) cmd_name = cmd_it->second;
              }

              ESP_LOGD("uart", "Command Code: 0x%02X (%s), Subcode: 0x%02X", cmd_code, cmd_name, cmd_subcode);

              // HUMIDIFICATION_DEMAND
              if (cmd_code == 0x63) {
                size_t data_start = cmd_index + 2;
                size_t remaining = (10 + packet_length) - data_start;
                if (remaining >= 2) {
                  uint8_t refresh_timer = bytes[data_start];
                  uint8_t humid_demand_percent_byte = bytes[data_start + 1];
                  float humid_demand_percentage = humid_demand_percent_byte / 2.0f; // 0..200 => 0..100%

                  ESP_LOGD("uart", "HUMIDIFICATION_DEMAND Details:");
                  ESP_LOGD("uart", "  Refresh Timer: %u", refresh_timer);
                  ESP_LOGD("uart", "  Humidification Demand Percentage: %.1f%%", humid_demand_percentage);

                  // Store the percentage in a global so we can publish to Home Assistant sensor
                  id(humidification_demand_glob) = humid_demand_percentage;
                } else {
                  ESP_LOGW("uart", "Not enough bytes for HUMIDIFICATION_DEMAND command payload.");
                }
              }

              // FAN_DEMAND (0x66)
              if (cmd_code == 0x66) {
                size_t data_start = cmd_index + 2;
                size_t remaining = (10 + packet_length) - data_start;
                if (remaining >= 3) {
                  uint8_t refresh_timer = bytes[data_start];
                  uint8_t fan_mode = bytes[data_start + 1];
                  uint8_t fan_demand_percent_byte = bytes[data_start + 2];
                  float fan_demand_percentage = fan_demand_percent_byte / 2.0f;

                  ESP_LOGD("uart", "FAN_DEMAND Details:");
                  ESP_LOGD("uart", "  Refresh Timer: %u", refresh_timer);
                  ESP_LOGD("uart", "  Fan Mode: %u (0=lowest,5=highest)", fan_mode);
                  ESP_LOGD("uart", "  Fan Demand Percentage: %.1f%%", fan_demand_percentage);

                  // Update the global variables for Fan Demand & Mode
                  id(fan_demand_glob) = fan_demand_percentage;
                  id(fan_mode_glob)   = fan_mode;

                  if (remaining > 3) {
                    uint8_t fan_on_off_rate = bytes[data_start + 3];
                    ESP_LOGD("uart", "  Fan On/Off Rate: %u", fan_on_off_rate);
                    id(fan_rate_glob) = fan_on_off_rate;  // Update global
                  } else {
                    ESP_LOGD("uart", "  No Fan On/Off Rate byte present.");
                    id(fan_rate_glob) = 0;
                  }
                } else {
                  ESP_LOGW("uart", "Not enough bytes for FAN_DEMAND command payload.");
                }
              }

              // HEAT_DEMAND (0x64)
              if (cmd_code == 0x64) {
                size_t data_start = cmd_index + 2;
                size_t remaining = (10 + packet_length) - data_start;
                if (remaining >= 2) {
                  uint8_t refresh_timer = bytes[data_start];
                  uint8_t heat_demand_percent_byte = bytes[data_start + 1];
                  float heat_demand_percentage = heat_demand_percent_byte / 2.0f;

                  ESP_LOGD("uart", "HEAT_DEMAND Details:");
                  ESP_LOGD("uart", "  Refresh Timer: %u", refresh_timer);
                  ESP_LOGD("uart", "  Heat Demand Percentage: %.1f%%", heat_demand_percentage);

                  // Update the global variable for Heat Demand
                  id(heat_demand_glob) = heat_demand_percentage;
                } else {
                  ESP_LOGW("uart", "Not enough bytes for HEAT_DEMAND command payload.");
                }
              }

              // PERMANENT_SET_POINT_TEMP_HOLD_MODIFY (0x06), etc. ...
              // (other commands as needed)

            } // end if (packet_length > 1)
          } else {
            // Not a SET_CONTROL_COMMAND or SET_CONTROL_COMMAND_RESPONSE message, skip command parsing
            ESP_LOGD("uart", "This message type does not carry commands. Skipping command decode.");
          }
